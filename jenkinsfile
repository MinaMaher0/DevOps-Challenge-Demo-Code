pipeline {
    agent none
    stages {
        stage('Build And Test on Development environment') {
            agent { label 'development' }
            environment {
                ENV_TYPE = 'DEV'
            }
            stages{
                stage('build App image'){
                    steps {
                        script {
                            try{
                                    sh 'docker build -t torando:latest .'
                            }catch(err){

                                blocks = [
                                            [
                                                "type": "section",
                                                "text": [
                                                    "type": "mrkdwn",
                                                    "text": "*Farmhouse Thai Cuisine*\n:star::star::star::star: 1528 reviews\n They do have some vegan options, like the roti and curry, plus they have a ton of salad stuff and noodles can be ordered without meat!! They have something for everyone here"
                                                ],
                                                "accessory": [
                                                    "type": "image",
                                                    "image_url": "https://s3-media3.fl.yelpcdn.com/bphoto/c7ed05m9lC2EmA3Aruue7A/o.jpg",
                                                    "alt_text": "alt text for image"
                                                ]
                                            ]
                                        ]
                                slackSend(channel: '#general', blocks: blocks)
                                currentBuild.result = 'FAILED'
                                error('Testing Failedâ€¦')
                            }
                        }
                    }
                }
                stage('clean development envirnment') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            sh 'docker stop $(docker ps -q)'
                            sh 'docker rm $(docker ps -a -q)'
                        }
                    }
                }
                stage('deploy on development environment'){
                    steps {
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
        stage('Deploy on Production environment') {
            agent { label 'production' }
            environment {
                ENV_TYPE = 'PROD'
            }
            stages{
                stage('clean production envirnment') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            sh 'docker stop $(docker ps -q)'
                            sh 'docker rm $(docker ps -a -q)'
                        }
                    }
                }
                stage('build App image'){
                    steps {
                        sh 'docker build -t torando:latest .'
                    }
                }
                stage('deploy on production envirnment'){
                    steps {
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
        stage('send slack message'){
            agent any
            stages{
                stage('send done and tested message'){
                    steps {
                        slackSend channel: '#first-challenge', 
                                color: 'good',
                                message: 'Done and Tested'
                    }
                }
            }
        }
    }
}